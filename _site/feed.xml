<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>NUS GreyHats</title>
		<description>NUS GreyHats is a newly formed special interest group designed to spark students&#39; interest in information security and advance the level of security proficiency towards the aim of contributing to the growing need for cyber defenders in the government and private sectors.</description>
		<link>http://www.nusgreyhats.org</link>
		<atom:link href="http://www.nusgreyhats.org/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>TrendMicroCTF - VirusClicker (Offensive 200)</title>
				
				
					<description>&lt;h2&gt;Click Button! Attack Virus!&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;Points:&lt;/b&gt; 200 &lt;b&gt;Category:&lt;/b&gt; Offensive &lt;b&gt;Description:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;/write-ups/resources/VirusClicker.apk&quot;&gt;VirusClicker&lt;/a&gt;&lt;br /&gt;
MD5: 1a0462c2bc27bdd3a5045036c36c3e31&lt;/p&gt;
&lt;hr /&gt;

&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;
	After downloading the APK and installing it on my BlueStacks Emulator, you see this screen that requires us to press on the button for 10&#39;000&#39;000 times...
&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/write-ups/img/res/virusclicker.png&quot; height=&quot;300px&quot; /&gt;&lt;img src=&quot;/write-ups/img/res/10mclicks.png&quot; height=&quot;300px&quot; /&gt;&lt;/center&gt;
&lt;p&gt;
	We first use apktool to decompile the apk into the respective smali code. &lt;br /&gt;
	&lt;img src=&quot;/write-ups/img/res/apkdecode.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;br /&gt;
	The part of the code that we&#39;re interested in is the onTouchEvent that is called on every press.
&lt;/p&gt;
&lt;pre&gt;
.method public onTouchEvent(Landroid/view/MotionEvent;)Z
    .locals 4
    const/4 v3, 0x1
    invoke-virtual {p1}, Landroid/view/MotionEvent;-&amp;gt;getAction()I
    move-result v0
    packed-switch v0, :pswitch_data_0
    :cond_0
    :goto_0
    return v3
    :pswitch_0
    iput-boolean v3, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;h:Z
    goto :goto_0
    :pswitch_1
    const/4 v0, 0x0
    iput-boolean v0, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;h:Z
    iget v0, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;g:I
    add-int/lit8 v0, v0, 0x1
    iput v0, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;g:I
    invoke-static {}, Lcom/tm/ctf/clicker/a/a;-&amp;gt;b()V
    const/16 v0, 0xeb9
    iget v1, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;g:I
    if-eq v0, v1, :cond_1
    const/16 v0, 0x2717
    iget v1, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;g:I
    if-eq v0, v1, :cond_1
    const v0, 0xe767
    iget v1, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;g:I
    if-eq v0, v1, :cond_1
    const v0, 0x186a3
    iget v1, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;g:I
    if-eq v0, v1, :cond_1
    const v0, 0x78e75
    iget v1, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;g:I
    if-eq v0, v1, :cond_1
    const v0, 0xf4243
    iget v1, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;g:I
    if-eq v0, v1, :cond_1
    const v0, 0x98967f
    iget v1, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;g:I
    if-ne v0, v1, :cond_2
    :cond_1
    new-instance v0, Landroid/content/Intent;
    const-string v1, &quot;com.tm.ctf.clicker.SCORE&quot;
    invoke-direct {v0, v1}, Landroid/content/Intent;-&amp;gt;&amp;lt;init&amp;gt;(Ljava/lang/String;)V
    const-string v1, &quot;SCORE&quot;
    iget v2, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;g:I
    invoke-virtual {v0, v1, v2}, Landroid/content/Intent;-&amp;gt;putExtra(Ljava/lang/String;I)Landroid/content/Intent;
    iget-object v1, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;a:Landroid/content/Context;
    invoke-virtual {v1, v0}, Landroid/content/Context;-&amp;gt;sendBroadcast(Landroid/content/Intent;)V
    :cond_2
    const v0, 0x989680
    iget v1, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;g:I
    if-gt v0, v1, :cond_0
    invoke-static {}, Landroid/os/Message;-&amp;gt;obtain()Landroid/os/Message;
    move-result-object v0
    new-instance v1, Ljava/lang/StringBuilder;
    iget-object v2, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;q:Ljava/lang/String;
    invoke-static {v2}, Ljava/lang/String;-&amp;gt;valueOf(Ljava/lang/Object;)Ljava/lang/String;
    move-result-object v2
    invoke-direct {v1, v2}, Ljava/lang/StringBuilder;-&amp;gt;&amp;lt;init&amp;gt;(Ljava/lang/String;)V
    const-string v2, &quot;Jh&quot;
    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;-&amp;gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;
    move-result-object v1
    invoke-virtual {v1}, Ljava/lang/StringBuilder;-&amp;gt;toString()Ljava/lang/String;
    move-result-object v1
    iput-object v1, v0, Landroid/os/Message;-&amp;gt;obj:Ljava/lang/Object;
    iget-object v1, p0, Lcom/tm/ctf/clicker/activity/c;-&amp;gt;b:Landroid/os/Handler;
    invoke-virtual {v1, v0}, Landroid/os/Handler;-&amp;gt;sendMessage(Landroid/os/Message;)Z
    goto :goto_0
    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_0
        :pswitch_1
    .end packed-switch
	.end method 
&lt;/pre&gt;
&lt;p&gt;
	From the code, we can see that something will happen after we hit 0x989680 (10&#39;000&#39;000) clicks.&lt;br /&gt;
	Also, it seems that there are &quot;mini-checkpoints&quot; that you&#39;re suppose to hit at 0xeb9, 0x2717, 0xe767, 0x186a3, 0x78e75, 0xf4243, 0x98967f. What I am going to do is to patch the APK such that upon the first touch event, I am going to invoke all the necessary instructions to show me the flag.
&lt;/p&gt;
&lt;pre&gt;
	const v0, 0x989680
    const v1, 0x989680
    if-gt v0, v1, :cond_0
&lt;/pre&gt;
&lt;p&gt;
	The same for all the &quot;mini-checkpoints&quot;. &lt;br /&gt;
	We then use apktool to recompile the smali code back to .apk and then use jarsigner to sign it with a key we generated.&lt;br /&gt;
	&lt;img src=&quot;/write-ups/img/res/apksign.png&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
	We then install the &quot;patched&quot; apk onto the BlueStacks emulator and tada! We got the flag!
&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/write-ups/img/res/virusflag.png&quot; height=&quot;300px&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;b&gt;TMCTF{Congrats_10MClicks}&lt;/b&gt;
&lt;/p&gt;

</description>
				
				<pubDate>Thu, 08 Oct 2015 00:00:00 +0800</pubDate>
				<link>http://www.nusgreyhats.org/TrendMicroCTF-VirusClicker-(Offensive-200)/</link>
				<guid isPermaLink="true">http://www.nusgreyhats.org/TrendMicroCTF-VirusClicker-(Offensive-200)/</guid>
			</item>
		
			<item>
				<title>TrendMicroCTF - 500 Captchas! (Misc 300)</title>
				
				
					<description>&lt;h1&gt;Welcome to Captcha Challenge!&lt;/h1&gt;
&lt;p&gt;The challenge description was a website, upon entering the website, you are allowed to register/sign in.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
	After registering and logging in, you are shown a captcha, and it seems that the challenge was to solve 500 consecutive captchas without any mistakes. However, it seems that you are able to skip captchas by refreshing the page (this turned out to be very useful).&lt;br /&gt;&lt;br /&gt;
	Captchas looks like this:
&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/write-ups/img/res/captcha.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;img src=&quot;/write-ups/img/res/captcha2.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/center&gt;
&lt;p&gt;
	To automatically solve all 500 captchas, we wrote a python script using the Python Imaging Library. The trick to solving the captchas was to do some pre-processing and to build a dataset of good characters which we will be using to solve new captchas.	
	&lt;br /&gt;
	&lt;h3&gt;Processing&lt;/h3&gt;
	&lt;b&gt;Turn background/noise to white, and text to black&lt;/b&gt;
	&lt;p&gt;Scan the entire picture and rank the colours by frequency, the background colour would have the highest frequency followed by the text&lt;/p&gt;
&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/write-ups/img/res/processed.jpg&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/center&gt;
&lt;p&gt;
	&lt;b&gt;Dynamically slice the image by characters&lt;/b&gt;
	&lt;p&gt;For each X coordinate, if the Y coordinates along the X coordinate has a black pixel:&lt;br /&gt;
  		set inLetter = true&lt;br /&gt;
Keep going along X until you reach a X where there is no black pixel along it, then you have your starting and ending x coordinate for your character!
&lt;/p&gt;
&lt;pre&gt;for y in range(im2.size[0]): # slice across
    for x in range(im2.size[1]): # slice down
      pix = im2.getpixel((y,x))
      if pix != 255:
        inletter = True
        last = y
    if foundletter == False and inletter == True:
      foundletter = True
      start = y

&lt;/pre&gt;&lt;/p&gt;
</description>
				
				<pubDate>Thu, 08 Oct 2015 00:00:00 +0800</pubDate>
				<link>http://www.nusgreyhats.org/TrendMicroCTF-500-Captchas!-(Misc-300)/</link>
				<guid isPermaLink="true">http://www.nusgreyhats.org/TrendMicroCTF-500-Captchas!-(Misc-300)/</guid>
			</item>
		
			<item>
				<title>Capture The Flag 101 Workshop</title>
				
				
					<description>&lt;center&gt;&lt;img src=&quot;/write-ups/img/thectf.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/center&gt;
&lt;p&gt;
NUS Greyhats Capture The Flag 101 is a capture-the-flag (CTF) style workshop that will be spanned over two Saturdays. Participants will learn techniques and tools to exploit software vulnerabilities to uncover secret flags hidden in various challenge. This workshop is designed to be progressive and is beginner friendly. In addition, we will have a live CTF scoreboard to show your ranking :)  
&lt;/p&gt;
&lt;p&gt;
You can sign up for the event &lt;a href=&quot;https://docs.google.com/forms/d/1ppvnaRWzhwuSZ60CIKem4E37eyLQMbfltEw_xmutMBU/&quot;&gt;here&lt;/a&gt; (while stocks last).
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Date:&lt;/b&gt; 15 and 22 August 2015&lt;br /&gt;
&lt;b&gt;Time:&lt;/b&gt; 1PM - 5PM&lt;br /&gt;
&lt;b&gt;Venue:&lt;/b&gt; School of Computing COM 1 Seminar Room 3 &lt;br /&gt;
(Registration from 12.30PM onwards)
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;15 August 2015&lt;/b&gt;&lt;br /&gt;
This session will focus on systems security which includes topics in source code auditing, representation of code as data, exploitation of insecure scripts, exploitation of format string bugs, and exploitation of memory corruption bugs.
&lt;/p&gt;

</description>
				
				<pubDate>Sun, 09 Aug 2015 00:00:00 +0800</pubDate>
				<link>http://www.nusgreyhats.org/Capture-The-Flag-101-Workshop/</link>
				<guid isPermaLink="true">http://www.nusgreyhats.org/Capture-The-Flag-101-Workshop/</guid>
			</item>
		
			<item>
				<title>POLICTF 2015 Write Up - John the Traveller (Web)</title>
				
				
					<description>&lt;div class=&quot;holder&quot;&gt;   
				&lt;p&gt;
					Holidays are here! But John still hasn&#39;t decided where to spend them and time is running out: flights are overbooked and prices are rising every second. Fortunately, John just discovered a website where he can book last second flight to all the European capitals; however, there&#39;s no time to waste, so he just grabs his suitcase and thanks to his new smartphone he looks the city of his choice up while rushing to the airport. There he goes! Flight is booked so... hauskaa lomaa! &lt;br /&gt;&lt;br /&gt;
					&lt;a href=&quot;http://traveller.polictf.it/&quot;&gt;http://traveller.polictf.it/&lt;/a&gt;
				&lt;/p&gt;
				&lt;hr /&gt;
	
				&lt;p&gt;
					We visited the site and saw the following page. &lt;br /&gt;&lt;br /&gt;
					&lt;/p&gt;&lt;center&gt;&lt;img src=&quot;/write-ups/img/travellersite.JPG&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/center&gt;
				&lt;p&gt;&lt;/p&gt;
				&lt;br /&gt;
				&lt;p&gt;
				We tried to key into some arbitrary city, however, it returns back the same page. Looking back at the challenge description, we noticed something that stands out - &lt;b&gt;hauskaa lomaa&lt;/b&gt;. A search revealed that these two words is actually Finnish. We also found out that the capital of Finland is &lt;b&gt;Helsinki&lt;/b&gt;. Entering that into the search field and we got ....
					&lt;br /&gt;&lt;br /&gt;
					&lt;/p&gt;&lt;center&gt;&lt;img src=&quot;/write-ups/img/helsinki.JPG&quot; width=&quot;75%&quot; height=&quot;75%&quot; /&gt;&lt;/center&gt;
				&lt;p&gt;&lt;/p&gt;
				
				&lt;br /&gt;
				&lt;p&gt;
					Great. So the next step is to try and book the ticket. But how do we do so? The price is in px. Does it mean pixels?  The challenge also mentioned &quot;he just grabs his suitcase and thanks to his new smartphone&quot;. Let&#39;s try to adjust our browser size to one of the pixel size using Chrome browser dev tools. 
					&lt;br /&gt;&lt;br /&gt;
					&lt;/p&gt;&lt;center&gt;&lt;img src=&quot;/write-ups/img/devtools.JPG&quot; width=&quot;25%&quot; height=&quot;25%&quot; /&gt;&lt;/center&gt;
				&lt;p&gt;&lt;/p&gt;

&lt;/div&gt;
</description>
				
				<pubDate>Mon, 03 Aug 2015 00:00:00 +0800</pubDate>
				<link>http://www.nusgreyhats.org/polictf-2015-write-up-john-the-traveller-(web)/</link>
				<guid isPermaLink="true">http://www.nusgreyhats.org/polictf-2015-write-up-john-the-traveller-(web)/</guid>
			</item>
		
	</channel>
</rss>
